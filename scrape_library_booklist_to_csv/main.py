import os
import csv
import time
import requests
from playwright.sync_api import sync_playwright
from pathlib import Path

ROOT = Path(__file__).parent.parent
CSV_PATH = ROOT / '_out' / "books.csv"
SESSION_FILE = ROOT / 'user_data' / 'my-kindle-scraper-session.json'
DEBUG_HTML_PATH = ROOT / '_out' / 'my-kindle-scraper-debug.html'

def main():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        viewport_size = {'width': 1920*2, 'height': 1080*2}
        if os.path.exists(SESSION_FILE):
            context = browser.new_context(storage_state=str(SESSION_FILE), viewport=viewport_size)
        else:
            context = browser.new_context(viewport=viewport_size)

        page = context.new_page()
        page.goto("https://read.amazon.co.jp/kindle-library")

        if not os.path.exists(SESSION_FILE):
            print("üëâ Amazon„Å´„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ...")
            page.wait_for_load_state("networkidle")
            time.sleep(30)
            context.storage_state(path=str(SESSION_FILE))
            print(f"‚úÖ „Çª„ÉÉ„Ç∑„Éß„É≥„Çí {SESSION_FILE} „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü")

        # „Éö„Éº„Ç∏„Çí‰∏ã„Åæ„Åß„Çπ„ÇØ„É≠„Éº„É´„Åó„Å¶ÂÖ®‰ª∂Ë™≠„ÅøËæº„ÅøÔºà„Ç¢„Ç§„ÉÜ„É†Êï∞„ÅåÂ¢ó„Åà„Å™„Åè„Å™„Çã„Åæ„ÅßÂæÖ„Å§Ôºâ
        # „Éö„Éº„Ç∏ÂÜÖ„Åß„Çπ„ÇØ„É≠„Éº„É´ÂèØËÉΩ„Å™Ë¶™Ë¶ÅÁ¥†„ÇíÊé¢„Åó„Å¶„Åù„Åì„Çí„Çπ„ÇØ„É≠„Éº„É´„Åó„ÄÅ
        # „Çø„Ç§„Éà„É´„ÇíÊåÅ„Å§ÂÆü„Ç¢„Ç§„ÉÜ„É†„ÅÆÊï∞„ÅåÂ¢ó„Åà„Å™„Åè„Å™„Çã„Åæ„ÅßÂæÖ„Å§ÔºàJS ÂÆüË°åÔºâ
        scroll_js = r'''
        () => {
                const selector = 'ul#cover li[role="listitem"]';
                const sleep = ms => new Promise(res => setTimeout(res, ms));

                function countItems(){
                    return Array.from(document.querySelectorAll(selector)).filter(li=>{
                        const titleNode = li.querySelector('div[id^="title-"] p');
                        return titleNode && titleNode.textContent.trim().length > 0;
                    }).length;
                }

                function findScrollParent(el){
                    let cur = el;
                    while(cur && cur !== document.body){
                        if (cur.scrollHeight > cur.clientHeight) return cur;
                        cur = cur.parentElement;
                    }
                    return window;
                }

                return new Promise(async (resolve) => {
                    const list = document.querySelector('ul#cover');
                    const scroller = list ? findScrollParent(list) : window;
                    let prev = -1;
                    let stable = 0;
                    const maxRounds = 200;
                    for (let i = 0; i < maxRounds; i++) {
                        if (scroller === window) {
                            window.scrollTo(0, document.body.scrollHeight);
                        } else {
                            scroller.scrollTo({ top: scroller.scrollHeight, behavior: 'auto' });
                        }
                        // Ë™≠„ÅøËæº„ÅøÂæÖ„Å°
                        await sleep(1000);
                        const c = countItems();
                        if (c !== prev) {
                            prev = c;
                            stable = 0;
                        } else {
                            stable += 1;
                        }
                        // ÈÄ£Á∂ö„Åó„Å¶Âêå„Åò‰ª∂Êï∞„Åå3ÂõûÁ∂ö„ÅÑ„Åü„ÇâÂÆå‰∫Ü„Å®„Åø„Å™„ÅôÔºà‰ΩôË£ï„ÇíÊåÅ„Åü„Åõ„ÇãÔºâ
                        if (stable >= 3) break;
                        // Â∞ë„Åó„Å†„ÅëËøΩÂä†ÂæÖÊ©ü„Åó„Å¶Á¢∫ÂÆü„Å´Ë™≠„ÅøËæº„Åø„ÇíÂèçÊò†
                        await sleep(400);
                    }
                    resolve(prev);
                });
            }
        '''
    
        try:
            page.evaluate(scroll_js)
            page.wait_for_selector("ul#cover li[role='listitem']", timeout=60000)
        except Exception:
            # JS ÂÆüË°å„ÇÑÂæÖÊ©ü„Å´Â§±Êïó„Åó„Å¶„ÇÇÂá¶ÁêÜ„ÇíÁ∂ôÁ∂ö„Åï„Åõ„Çã
            pass

        # JS„ÅßÊõ∏Á±ç„Éá„Éº„Çø„ÇíÁõ¥Êé•ÊäΩÂá∫
        extract_js = r'''
        () => {
            function norm(s){ return (s||"").replace(/\s+/g,' ').trim(); }
                const results = [];
                const items = document.querySelectorAll('ul#cover li[role="listitem"]');
                items.forEach(li => {
                    const titleNode = li.querySelector('div[id^="title-"] p');
                    const authorNode = li.querySelector('div[id^="author-"] p');
                    const imgNode = li.querySelector('img[id^="cover-"]');

                    const title = norm(titleNode ? titleNode.textContent : "");
                    const author = norm(authorNode ? authorNode.textContent : "");
                    const img = imgNode ? imgNode.src : "";

                    if (title) {
                        results.push({title, author, img});
                    }
                });
                return results;
            }
        '''
        books = page.evaluate(extract_js)
        print("‚úÖ „Éñ„É©„Ç¶„Ç∂ÂÜÖ„ÅßÊäΩÂá∫„Åó„Åü‰ª∂Êï∞:", len(books))

        with open(DEBUG_HTML_PATH, "w", encoding="utf-8") as f:
            f.write(page.content())
        browser.close()
            
    # CSV Êõ∏„ÅçËæº„Åø
    rows = []
    for b in books:
        title, author = b["title"], b["author"]
        rows.append([title, author])

    with open(CSV_PATH, "w", newline="", encoding="utf-8-sig") as f:
        writer = csv.writer(f)
        writer.writerow(["Title", "Author"])
        writer.writerows(rows)

    print(f"‚úÖ Êõ∏Á±ç‰∏ÄË¶ß„Çí {CSV_PATH} „Å´‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºà{len(rows)} ‰ª∂Ôºâ")

if __name__ == "__main__":
    main()
